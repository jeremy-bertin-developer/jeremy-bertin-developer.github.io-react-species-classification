{"version":3,"sources":["Components/Header/Header.js","Components/Sidebar/Sidebar.js","Components/Buttons/Buttons.js","Library/species.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Sidebar","state","listRegion","handleClick","identifier","props","handleSpecies","fetch","then","response","json","data","LIST_REGION","results","map","el","index","NAME","name","onClick","key","value","setState","this","React","Component","Buttons","handleEndanger","handleMammals","role","aria-label","type","GroupSpecies","region","id","category","class_name","App","newGroupSpecies","LIST_SPECIES","result","scientific_name","ID","taxonid","CATEGORY","CLASS_NAME","SPECIES_PER_REGION","push","regionSpecies","replace","toUpperCase","ULIST","listSpecies","isRegion","ENDANGER_SPECIES","NEW_ENDANGER_SPECIES","uList","MAMMALS_SPECIES","NEW_MAMMALS_SPECIES","isClicked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd3c9c2d.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <header className=\"container-fluid mx-auto\">\n      <div className=\"row\">\n        <div className=\"col-12 header-wrapper\">\n            <h1 className=\"text-left m-3\">BIM SPOT â€” API Exercise</h1>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;","import React from \"react\";\nimport \"./Sidebar.css\";\n\n/* the Sidebar component generating the list of the region */\nclass Sidebar extends React.Component {\n  /* the state initialise the listRegion */\n  state = {\n    listRegion: \"\"\n  };\n\n  /* the handleClick function will send up to the parent the identifier to be re used afterwards */\n  handleClick = identifier => {\n    this.props.handleSpecies(identifier);\n  };\n\n  /* when the app is uploading it displaying the region with the componentDidMount method */\n  componentDidMount() {\n    fetch(\n      \"http://apiv3.iucnredlist.org/api/v3/region/list?token=9bb4facb6d23f48efbf424bb05c0c1ef1cf6f468393bc745d42179ac4aca5fee\"\n    )\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n\n        /* create the list by mapping over the datas stored in a variable */\n        const LIST_REGION = data.results.map((el, index) => {\n          const NAME = el.name;\n\n          let { identifier } = this.props;\n\n          identifier = el.identifier;\n\n          return (\n            <li\n              onClick={() => this.handleClick(identifier)}\n              key={index}\n              value={identifier}\n              className=\"list-group-item text-center\"\n            >\n              {NAME}\n            </li>\n          );\n        });\n\n        /* we attribute finally the state to the variable created just before */\n        this.setState({\n          listRegion: LIST_REGION\n        });\n      });\n  }\n\n  /* then we render the list */\n  render() {\n    return (\n      <div className=\"col-4 sidebar-wrapper my-3\">\n        <h2 className=\"text-center my-3\">CHOOSE A REGION</h2>\n        <ul className=\"list-group\">{this.state.listRegion}</ul>\n      </div>\n    );\n  }\n}\n\nexport default Sidebar;\n","import React from \"react\";\nimport \"./Buttons.css\";\n\n/* the Buttons component generate two buttons that have the function to render the endanger list or the mammals list */\nconst Buttons = props => {\n\n  const { handleEndanger, handleMammals } = props;\n  \n  return (\n    <div\n      className=\"btn-group btn-group-lg text-center mb-3\"\n      role=\"group\"\n      aria-label=\"...\"\n    >\n      <button onClick={handleEndanger} type=\"button\" className=\"btn\">\n        Endangered Species\n      </button>\n      <button onClick={handleMammals} type=\"button\" className=\"btn\">\n        Mammals Species\n      </button>\n    </div>\n  );\n};\n\nexport default Buttons;\n","/* the Species class is the model to create the new array of objects */\n\nclass GroupSpecies {\n    constructor(region, name, id, category, class_name){\n        this.region = region;\n        this.name = name;\n        this.id = id;\n        this.category = category;\n        this.class_name = class_name\n    }\n}\n\nexport default GroupSpecies;\n\n","import React from \"react\";\nimport \"./App.css\";\n\n// bootstrap\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// import components\nimport Header from \"./Components/Header/Header\";\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Buttons from \"./Components/Buttons/Buttons\";\nimport GroupSpecies from \"./Library/species\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    /* listSpecies will render the list of the spcies, all of them per region or by mammals or endangered.\n    isRegion is use for rendering the region name matching with the list on top of the list */\n    this.state = {\n      listSpecies: \"\",\n      isRegion: false,\n      isClicked: false\n    };\n    /* newGroupSpecies will be the array variable that i will use all over the app to generate and render all the lists */\n    this.newGroupSpecies = [];\n  }\n  //__________________________________________________________________________________________________________\n\n  /* handleSpecies handle the list of species per region */\n  handleSpecies = identifier => {\n    /* once the function is clicked  newGroupSpecies is clened up*/\n    this.newGroupSpecies = [];\n    /* then the API is fetch to get the list of species accordingly to the identifier that was passed from the child component Sidebar */\n    fetch(\n      `http://apiv3.iucnredlist.org/api/v3/species/region/${identifier}/page/0?token=9bb4facb6d23f48efbf424bb05c0c1ef1cf6f468393bc745d42179ac4aca5fee`\n    )\n      /* i did not put any specific error handling but it can be done */\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        /* listSpecies is generating the list by mapping through the data given from the fetch */\n        const LIST_SPECIES = data.result.map(el => {\n          /* here i store the value that i need into variables */\n          const NAME = el.scientific_name;\n          const ID = el.taxonid;\n          const CATEGORY = el.category;\n          const CLASS_NAME = el.class_name;\n\n          /* here i create a new object based on the model object */\n          const SPECIES_PER_REGION = new GroupSpecies(\n            identifier,\n            NAME,\n            ID,\n            CATEGORY,\n            CLASS_NAME\n          );\n\n          /* then i push all those objects into the empty array newGroupSpecies \n          i will need this array of objects to render later on the mammals and the endangered species*/\n          this.newGroupSpecies.push(SPECIES_PER_REGION);\n          /* return the result of all the species as a list */\n          return (\n            <>\n              <li key={ID} className=\"text-center\">\n                {NAME}\n              </li>\n            </>\n          );\n        });\n        /* here is to get the name of the region that have been clicked and display it on top of the list */\n        let regionSpecies = this.newGroupSpecies[0].region;\n        regionSpecies = regionSpecies.replace(/_/g, \" \").toUpperCase();\n\n        /* creating a variable to render the title of the list and the list itself */\n        const ULIST = (\n          <>\n            <h2 className=\"enTitle text-center p-3 m-3\">\n              All Species from {regionSpecies}\n            </h2>\n            <ul className=\"list-group\">{LIST_SPECIES}</ul>\n          </>\n        );\n\n        /* updating the state for the last render method */\n        this.setState({\n          listSpecies: ULIST,\n          isRegion: true\n        });\n      });\n  };\n\n  //__________________________________________________________________________________________________________\n\n  /* handleEndanger will handle the endangered list from the region */\n  handleEndanger = () => {\n    /* once the whole list have been generated, i associate that list to a new variable. \n    because  newGroupSpecies will be cleaned up awhen we will click on a new region*/\n    const ENDANGER_SPECIES = this.newGroupSpecies;\n\n    /* getting the name of the region for the title */\n    let regionSpecies = this.newGroupSpecies[0].region;\n    regionSpecies = regionSpecies.replace(/_/g, \" \").toUpperCase();\n\n    /* mapping over the array and filter the category to get only the endangered species */\n    const NEW_ENDANGER_SPECIES = ENDANGER_SPECIES.map(el => {\n      if (el.category === \"EN\") {\n        const NAME = el.name;\n\n        /* return as list item */\n        return (\n          <>\n            <li className=\"text-center\">{NAME}</li>\n          </>\n        );\n      }\n    });\n\n    /* generating a new variable to store the title and the list */\n    const uList = (\n      <>\n        <h2 className=\"enTitle text-center p-3 m-3\">\n          Endangered Species from {regionSpecies}\n        </h2>\n        <ul className=\"list-group\">{NEW_ENDANGER_SPECIES}</ul>\n      </>\n    );\n\n    /* update the state with the new list */\n    this.setState({\n      listSpecies: uList\n    });\n  };\n\n  //__________________________________________________________________________________________________________\n\n  /* handleMammals does of course the same thing as handleEndanger */\n  handleMammals = () => {\n    const MAMMALS_SPECIES = this.newGroupSpecies;\n\n    let regionSpecies = this.newGroupSpecies[0].region;\n    regionSpecies = regionSpecies.replace(/_/g, \" \").toUpperCase();\n\n    const NEW_MAMMALS_SPECIES = MAMMALS_SPECIES.map(el => {\n      if (el.class_name === \"MAMMALIA\") {\n        const NAME = el.name;\n\n        return (\n          <>\n            <li className=\"text-center\">{NAME}</li>\n          </>\n        );\n      }\n    });\n\n    let uList = (\n      <>\n        <h2 className=\"enTitle text-center p-3 m-3\">\n          Mammals Species from {regionSpecies}\n        </h2>\n        <ul className=\"list-group\">{NEW_MAMMALS_SPECIES}</ul>\n      </>\n    );\n\n    this.setState({\n      listSpecies: uList\n    });\n  };\n\n  //__________________________________________________________________________________________________________\n\n  /* then render the whole app */\n  render() {\n    return (\n      <>\n        <Header />\n        <main className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-8 main-wrapper my-3\">\n              {this.state.isRegion && (\n                <Buttons\n                  handleEndanger={this.handleEndanger}\n                  handleMammals={this.handleMammals}\n                />\n              )}\n              {this.state.listSpecies}\n            </div>\n\n            <Sidebar handleSpecies={this.handleSpecies} />\n          </div>\n        </main>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}